{"version":3,"sources":["components/common/header.jsx","components/index/taskCreator.jsx","components/index/task.jsx","components/index/taskList.jsx","stores/index/index.type.jsx","stores/auth/auth.type.jsx","stores/auth/auth.action.jsx","network/codes.jsx","network/api.jsx","stores/index/index.action.jsx","screens/index.jsx","components/login/loginForm.jsx","screens/login.jsx","components/signup/signupForm.jsx","screens/signup.jsx","components/common/privateRoute.jsx","App.js","serviceWorker.js","stores/index/index.reducer.jsx","stores/auth/auth.reducer.jsx","stores/configureStore.jsx","index.js"],"names":["Header","props","className","authenticated","href","onClick","logout","TaskCreator","useState","content","setContent","htmlFor","rows","name","placeholder","maxLength","style","resize","onChange","e","target","value","addTask","Task","data","done","doneToggle","preventDefault","deleteCallback","id","TaskList","date","setDate","Fragment","type","loadTasks","today","Date","dd","String","getDate","padStart","mm","getMonth","yyyy","getFullYear","getToday","tasks","map","task","i","key","updateTask","deleteTask","actions","authenticate","setUserInfo","history","dispatch","getState","Swal","showLoading","ApiClient","Logout","finally","close","console","log","push","HttpCode","taskURL","apiURL","handleUnauthorized","response","status","json","then","body","authorized","Login","password","fetch","method","JSON","stringify","Signup","max_todo","Create","ReadAll","url","URLSearchParams","created_date","Update","Delete","error","fire","title","text","icon","catch","err","description","updateTaskOffline","deleteTaskOffline","IndexScreen","connect","state","index","user","auth","useHistory","useEffect","d","t","LoginForm","setId","setPassword","login","to","LoginScreen","from","replace","useLocation","pathname","SignupForm","maxTodo","setMaxTodo","signup","SignupScreen","PrivateRoute","children","rest","render","location","App","path","component","Boolean","window","hostname","match","initialState","reducer","action","filter","rootReducer","combineReducers","indexReducer","authReducer","store","createStore","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.ff204eae.chunk.js","sourcesContent":["import React from \"react\"\r\n\r\nfunction Header(props) {\r\n    return (\r\n        <header className=\"sans-serif bg-moon-gray\">\r\n            <div className=\"cf\">\r\n                {props.authenticated ?\r\n                    <a className=\"fl f4 w-20-ns w-100 tc v-mid link db pa3 black hover-white bg-animate hover-bg-mid-gray\" href=\"#\" onClick={() => props.logout()}>Logout</a> : null}\r\n            </div>\r\n            <div className=\"w-100 f1 v-mid tc pa5\">Togo Todo List</div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport { Header }","import React, { useState } from \"react\"\r\n\r\nfunction TaskCreator(props) {\r\n    const [content, setContent] = useState(\"\")\r\n\r\n    return (\r\n        <div className=\"mw8 center\">\r\n            <div className=\"cf\">\r\n                <div className=\"fl w-75-ns w-100 pa2\">\r\n                    <div className=\"fl w-25-ns w-100 pa2\">\r\n                        <label htmlFor=\"description\" className=\"v-mid tr db pa1\">Content</label>\r\n                    </div>\r\n                    <div className=\"fl w-75-ns w-100 pa2\">\r\n                        <textarea rows=\"6\" name=\"description\" className=\"w-100 pa1\" placeholder=\"What will you do? ...\" maxLength=\"200\" style={{ resize: \"none\" }} onChange={e => setContent(e.target.value)} value={content}></textarea>\r\n                    </div>\r\n                </div>\r\n                <div className=\"fl w-25-ns w-100 pa2\">\r\n                    <div className=\"pv2\">\r\n                        <div>\r\n                            <a href=\"#\" onClick={() => {\r\n                                setContent(\"\")\r\n                            }} className=\"link v-mid tc bg-gray white db w-100 pa1\">Reset</a>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"pv2\">\r\n                        <div className=\"mb1\">\r\n                            <a href=\"#\" onClick={() => {\r\n                                props.addTask(content)\r\n                                setContent(\"\")\r\n                            }} className=\"link v-mid tc bg-gray white db w-100 pa4\">Add</a>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport { TaskCreator }","import React from \"react\"\r\n\r\nfunction Task(props) {\r\n    return (\r\n        <div className=\"mw8 center pa2 cf\">\r\n            <div className=\"fl w-70-ns w-100 pa2\">\r\n                <div className=\"outline bg-white pa2 truncate\">{props.data.content}&nbsp;</div>\r\n            </div>\r\n            <div className=\"fl w-30-ns w-100 pa2 cf\">\r\n                <div className=\"fl w-50 ph2\">\r\n                    <a href=\"#\" className={`link v-mid tc db bg-white ba pa2 truncate ${props.data.done ? \"green b--green\" : \"gold b--gold\"}`} onClick={(e) => {\r\n                        props.doneToggle({\r\n                            ...props.data,\r\n                            done: !props.data.done,\r\n                        })\r\n                        e.preventDefault()\r\n                    }}>{props.data.done ? \"Done\" : \"Working\"}</a>\r\n                </div>\r\n                <div className=\"fl w-50 ph2\">\r\n                    <a href=\"#\" className=\"link v-mid tc db bg-white ba pa2 red b--red truncate\" onClick={(e) => {\r\n                        props.deleteCallback(props.data.id)\r\n                        e.preventDefault()\r\n                    }}>Delete</a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport { Task }","import React, { useState } from \"react\"\r\nimport { Task } from \"./task\"\r\n\r\nfunction getToday() {\r\n    const today = new Date()\r\n    const dd = String(today.getDate()).padStart(2, '0')\r\n    const mm = String(today.getMonth() + 1).padStart(2, '0')\r\n    const yyyy = String(today.getFullYear())\r\n    return `${yyyy}-${mm}-${dd}`\r\n}\r\n\r\nfunction TaskList(props) {\r\n    const [date, setDate] = useState(\"\")\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"cf\">\r\n                <div className=\"fl w-30-ns w-100\">&nbsp;</div>\r\n                <div className=\"fl w-20-ns w-100 pa2\">\r\n                    <input type=\"date\" className=\"w-100 pt1 pb2\" onChange={e => {\r\n                        setDate(e.target.value)\r\n                        props.loadTasks(e.target.value)\r\n                    }} value={date}></input>\r\n                </div>\r\n                <div className=\"fl w-10-ns w-50 pa2\">\r\n                    <a className=\"link db tc pa2 bg-white ba bw-1 f5 bg-animate hover-bg-gray hover-white\" href=\"#\" onClick={() => {\r\n                        const today = getToday()\r\n                        setDate(today)\r\n                        props.loadTasks(today)\r\n                    }}>Today</a>\r\n                </div>\r\n                <div className=\"fl w-10-ns w-50 pa2\">\r\n                    <a className=\"link db tc pa2 bg-white ba bw-1 f5 bg-animate hover-bg-gray hover-white\" href=\"#\" onClick={() => {\r\n                        setDate(\"\")\r\n                        props.loadTasks()\r\n                    }}>All</a>\r\n                </div>\r\n            </div>\r\n            {props.tasks.map((task, i) => {\r\n                return <Task key={task.id}\r\n                    data={task}\r\n                    doneToggle={props.updateTask}\r\n                    deleteCallback={props.deleteTask}\r\n                ></Task>\r\n            })}\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport { TaskList } ","export const actions = {\r\n    SET_TASKS: \"SET_TASKS\",\r\n    ADD_TASK: \"ADD_TASK\",\r\n    UPDATE_TASK: \"UPDATE_TASK\",\r\n    DELETE_TASK: \"DELETE_TASK\",\r\n}","export const actions = {\r\n    AUTHENTICATE: \"AUTHENTICATE\",\r\n    SET_USER_INFO: \"SET_USER_INFO\",\r\n}","import { actions } from \"./auth.type\"\r\nimport { ApiClient } from \"../../network/api\"\r\nimport Swal from 'sweetalert2'\r\n\r\nconst authenticate = (authenticated) => {\r\n    return {\r\n        type: actions.AUTHENTICATE,\r\n        authenticated: authenticated\r\n    }\r\n}\r\n\r\nconst setUserInfo = (id) => {\r\n    return {\r\n        type: actions.SET_USER_INFO,\r\n        id: id,\r\n    }\r\n}\r\n\r\nexport const login = (id, password, history, from) => {\r\n    return (dispatch, getState) => {\r\n        Swal.showLoading()\r\n        return ApiClient.Login(id, password)\r\n            .then(response => {\r\n                if (!response.authorized) {\r\n                    return Swal.fire({\r\n                        title: \"Login failed\",\r\n                        text: response.body.error,\r\n                        icon: \"error\",\r\n                    })\r\n                }\r\n                Swal.close()\r\n                dispatch(setUserInfo(id))\r\n                dispatch(authenticate(true))\r\n                history.replace(from, \"/\")\r\n            })\r\n            .catch(err => {\r\n                return Swal.fire({\r\n                    title: \"Login failed\",\r\n                    text: err,\r\n                    icon: \"error\",\r\n                })\r\n            })\r\n    }\r\n}\r\n\r\nexport const signup = (id, password, maxTodo, history, from) => {\r\n    return (dispatch, getState) => {\r\n        Swal.showLoading()\r\n        return ApiClient.Signup(id, password, maxTodo)\r\n            .then(response => {\r\n                if (!response.authorized) {\r\n                    return Swal.fire({\r\n                        title: \"Signup failed\",\r\n                        text: response.body.error,\r\n                        icon: \"error\",\r\n                    })\r\n                }\r\n                if (response.body.data) {\r\n                    Swal.close()\r\n                    dispatch(setUserInfo(id))\r\n                    dispatch(authenticate(true))\r\n                    history.replace(from, \"/\")\r\n                } else {\r\n                    return Swal.fire({\r\n                        title: \"Signup failed\",\r\n                        text: response.body.error,\r\n                        icon: \"error\",\r\n                    })\r\n                }\r\n            })\r\n            .catch(err => {\r\n                return Swal.fire({\r\n                    title: \"Signup failed\",\r\n                    text: err,\r\n                    icon: \"error\",\r\n                })\r\n            })\r\n    }\r\n}\r\n\r\nexport const logout = (history) => {\r\n    return (dispatch, getState) => {\r\n        Swal.showLoading()\r\n        return ApiClient.Logout()\r\n            .finally(() => {\r\n                Swal.close()\r\n                console.log(history)\r\n                history.push(\"/login\")\r\n            })\r\n    }\r\n}","export const HttpCode = {\r\n    STATUS_OK: 200,\r\n    STATUS_INTERNAL_SERVER_ERROR: 500,\r\n    STATUS_UNAUTHORIZED: 401,\r\n    STATUS_BAD_REQUEST: 400,\r\n    STATUS_CONFLICT: 409,\r\n}","import { Task } from \"../components/index/task\"\r\nimport { logout } from \"../stores/auth/auth.action\"\r\nimport { HttpCode } from \"./codes\"\r\n\r\nconst host = \"http://localhost\"\r\nconst port = 8888\r\nconst apiURL = \"/api\"\r\n\r\nconst loginURL = apiURL + \"/login\"\r\nconst signupURL = apiURL + \"/signup\"\r\nconst logoutURL = apiURL + \"/logout\"\r\nconst taskURL = apiURL + \"/tasks\"\r\n\r\nfunction handleUnauthorized(response) {\r\n    if (response.status === HttpCode.STATUS_UNAUTHORIZED) {\r\n        return response.json().then(body => {\r\n            return {\r\n                authorized: false,\r\n                body: body,\r\n            }\r\n        })\r\n    }\r\n    return response.json().then(body => {\r\n        return {\r\n            authorized: true,\r\n            body: body,\r\n        }\r\n    })\r\n}\r\n\r\nexport const ApiClient = {\r\n    Login: (id, password) => {\r\n        return fetch(loginURL, {\r\n            // credentials: \"include\",\r\n            method: \"POST\",\r\n            body: JSON.stringify({\r\n                id: id,\r\n                password: password,\r\n            }),\r\n        }).then(handleUnauthorized)\r\n    },\r\n    Signup: (id, password, max_todo) => {\r\n        return fetch(signupURL, {\r\n            // credentials: \"include\",\r\n            method: \"POST\",\r\n            body: JSON.stringify({\r\n                id: id,\r\n                password: password,\r\n                max_todo: max_todo,\r\n            })\r\n        }).then(handleUnauthorized)\r\n    },\r\n    Logout: () => {\r\n        return fetch(logoutURL, {\r\n            method: \"POST\"\r\n        })\r\n    },\r\n    tasks: {\r\n        Create: (content) => {\r\n            return fetch(taskURL, {\r\n                // credentials: \"include\",\r\n                method: \"POST\",\r\n                body: JSON.stringify({\r\n                    content: content,\r\n                    done: false,\r\n                }),\r\n            }).then(handleUnauthorized)\r\n        },\r\n        ReadAll: (date) => {\r\n            let url = taskURL\r\n            if (date) {\r\n                url = taskURL + \"?\" + new URLSearchParams({ created_date: date })\r\n            }\r\n            return fetch(url, {\r\n                // credentials: \"include\",\r\n            }).then(handleUnauthorized)\r\n        },\r\n        Update: (task) => {\r\n            return fetch(taskURL, {\r\n                // credentials: \"include\",\r\n                method: \"PUT\",\r\n                body: JSON.stringify({\r\n                    ...task,\r\n                }),\r\n            }).then(handleUnauthorized)\r\n        },\r\n        Delete: (id) => {\r\n            return fetch(taskURL, {\r\n                // credentials: \"include\",\r\n                method: \"DELETE\",\r\n                body: JSON.stringify({\r\n                    id: id,\r\n                })\r\n            }).then(handleUnauthorized)\r\n        },\r\n    },\r\n}","import { actions } from \"./index.type\"\r\nimport { ApiClient } from \"../../network/api\"\r\nimport { logout } from \"../auth/auth.action\"\r\nimport Swal from 'sweetalert2'\r\n\r\nconst setTasks = (data, error) => {\r\n    return {\r\n        type: actions.SET_TASKS,\r\n        data: data,\r\n        error: error,\r\n    }\r\n}\r\n\r\nexport const loadTasks = (date, history) => {\r\n    return (dispatch, getState) => {\r\n        Swal.showLoading()\r\n        return ApiClient.tasks.ReadAll(date)\r\n            .then(response => {\r\n                Swal.close()\r\n                if (!response.authorized) {\r\n                    dispatch(logout(history))\r\n                    return Swal.fire({\r\n                        title: \"You need to log in first\",\r\n                        text: response.body.error,\r\n                        icon: \"error\",\r\n                    })\r\n                } else if (response.body.error) {\r\n                    return Swal.fire({\r\n                        title: \"Error loading tasks\",\r\n                        text: response.body.error,\r\n                        icon: \"error\",\r\n                    })\r\n                }\r\n                dispatch(setTasks(response.body.data, null))\r\n            })\r\n            .catch(err => {\r\n                return Swal.fire({\r\n                    title: \"Unknown error\",\r\n                    text: err,\r\n                    type: \"error\",\r\n                })\r\n            })\r\n    }\r\n}\r\n\r\nconst addTaskOffline = (task) => {\r\n    return {\r\n        type: actions.ADD_TASK,\r\n        data: task,\r\n    }\r\n}\r\n\r\nexport const addTask = (name, description, history) => {\r\n    return (dispatch, getState) => {\r\n        Swal.showLoading()\r\n        return ApiClient.tasks.Create(name, description)\r\n            .then(response => {\r\n                Swal.close()\r\n                if (!response.authorized) {\r\n                    dispatch(logout(history))\r\n                    return Swal.fire({\r\n                        title: \"You need to log in first\",\r\n                        text: response.body.error,\r\n                        icon: \"error\",\r\n                    })\r\n                } else if (response.body.error) {\r\n                    return Swal.fire({\r\n                        title: \"Error adding new task\",\r\n                        text: response.body.error,\r\n                        icon: \"error\",\r\n                    })\r\n                }\r\n                dispatch(addTaskOffline(response.body.data))\r\n            })\r\n            .catch(err => {\r\n                return Swal.fire({\r\n                    title: \"Unknown error\",\r\n                    text: err,\r\n                    type: \"error\",\r\n                })\r\n            })\r\n    }\r\n}\r\n\r\nconst updateTaskOffline = (task) => {\r\n    return {\r\n        type: actions.UPDATE_TASK,\r\n        data: task,\r\n    }\r\n}\r\n\r\nexport const updateTask = (task, history) => {\r\n    return (dispatch, getState) => {\r\n        Swal.showLoading()\r\n        return ApiClient.tasks.Update(task)\r\n            .then(response => {\r\n                Swal.close()\r\n                if (!response.authorized) {\r\n                    dispatch(logout(history))\r\n                    return Swal.fire({\r\n                        title: \"You need to log in first\",\r\n                        text: response.body.error,\r\n                        icon: \"error\",\r\n                    })\r\n                } else if (response.body.error) {\r\n                    return Swal.fire({\r\n                        title: \"Error updating task\",\r\n                        text: response.body.error,\r\n                        icon: \"error\",\r\n                    })\r\n                }\r\n                dispatch(updateTaskOffline(response.body.data))\r\n            })\r\n            .catch(err => {\r\n                return Swal.fire({\r\n                    title: \"Unknown error\",\r\n                    text: err,\r\n                    type: \"error\",\r\n                })\r\n            })\r\n    }\r\n}\r\n\r\nconst deleteTaskOffline = (id) => {\r\n    return {\r\n        type: actions.DELETE_TASK,\r\n        data: id,\r\n    }\r\n}\r\n\r\nexport const deleteTask = (id, history) => {\r\n    return (dispatch, getState) => {\r\n        Swal.showLoading()\r\n        return ApiClient.tasks.Delete(id)\r\n            .then(response => {\r\n                Swal.close()\r\n                if (!response.authorized) {\r\n                    dispatch(logout(history))\r\n                    return Swal.fire({\r\n                        title: \"You need to log in first\",\r\n                        text: response.body.error,\r\n                        icon: \"error\",\r\n                    })\r\n                } else if (response.body.error) {\r\n                    return Swal.fire({\r\n                        title: \"Error removing tasks\",\r\n                        text: response.body.error,\r\n                        icon: \"error\",\r\n                    })\r\n                }\r\n                dispatch(deleteTaskOffline(response.body.data))\r\n            })\r\n            .catch(err => {\r\n                return Swal.fire({\r\n                    title: \"Unknown error\",\r\n                    text: err,\r\n                    type: \"error\",\r\n                })\r\n            })\r\n    }\r\n}\r\n","import React, { useEffect } from \"react\"\r\nimport { Header } from \"../components/common/header\"\r\nimport { TaskCreator } from \"../components/index/taskCreator\"\r\nimport { TaskList } from \"../components/index/taskList\"\r\nimport { connect } from \"react-redux\"\r\nimport { loadTasks, addTask, updateTask, deleteTask } from \"../stores/index/index.action\"\r\nimport { logout } from \"../stores/auth/auth.action\"\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nfunction Index(props) {\r\n    let history = useHistory()\r\n\r\n    useEffect(() => {\r\n        props.loadTasks(null, history)\r\n    }, [])\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Header authenticated={props.user.authenticated} logout={() => props.logout(history)}></Header>\r\n            <TaskCreator addTask={props.addTask}></TaskCreator>\r\n            <TaskList tasks={props.tasks.data} loadTasks={d => props.loadTasks(d, history)} updateTask={t => props.updateTask(t, history)} deleteTask={id => props.deleteTask(id, history)}></TaskList>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        tasks: state.index.tasks,\r\n        user: state.auth.user,\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        loadTasks: (date, history) => dispatch(loadTasks(date, history)),\r\n        addTask: (name, description, history) => dispatch(addTask(name, description, history)),\r\n        updateTask: (task, history) => dispatch(updateTask(task, history)),\r\n        deleteTask: (id, history) => dispatch(deleteTask(id, history)),\r\n        logout: (history) => dispatch(logout(history)),\r\n    }\r\n}\r\n\r\nconst IndexScreen = connect(mapStateToProps, mapDispatchToProps)(Index)\r\nexport { IndexScreen }","import React, { useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nfunction LoginForm(props) {\r\n    const [id, setId] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    return (\r\n        <div className=\"pa4\">\r\n            <div className=\"cf pa2\">\r\n                <div className=\"fl w-30-ns w-100 pa2 cf\">\r\n                    <label className=\"db fr f3\" htmlFor=\"id\">ID</label>\r\n                </div>\r\n                <div className=\"fl w-70-ns w-100 pa2\">\r\n                    <input type=\"text\" className=\"w-60\" name=\"id\" value={id} onChange={e => {\r\n                        setId(e.target.value)\r\n                    }}></input>\r\n                </div>\r\n            </div>\r\n            <div className=\"cf pa2\">\r\n                <div className=\"fl w-30-ns w-100 pa2 cf\">\r\n                    <label className=\"db fr f3\" htmlFor=\"password\">Password</label>\r\n                </div>\r\n                <div className=\"fl w-70-ns w-100 pa2\">\r\n                    <input type=\"password\" className=\"w-60\" name=\"password\" value={password} onChange={e => {\r\n                        setPassword(e.target.value)\r\n                    }}></input>\r\n                </div>\r\n            </div>\r\n            <div className=\"cf pa2 mt4\">\r\n                <div className=\"fl w-30-ns w-100 pa2\">&nbsp;</div>\r\n                <div className=\"fl w-70-ns w-100 pa2\">\r\n                    <a className=\"link w-60 v-mid tc bg-gray white db pa2 f3 mb2\" href=\"#\" onClick={() => {\r\n                        props.login(id, password)\r\n                    }}>Login</a>\r\n                    <Link className=\"link w-60 v-mid tc bg-white black ba bw-1 db pa2 f3\" to=\"/signup\">Signup</Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport { LoginForm }","import React from 'react'\r\nimport { Header } from \"../components/common/header\"\r\nimport { LoginForm } from '../components/login/loginForm'\r\nimport { login } from '../stores/auth/auth.action'\r\nimport { connect } from 'react-redux'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\n\r\nfunction Login(props) {\r\n    let history = useHistory();\r\n    let location = useLocation();\r\n    let { from } = location.state || { from: { pathname: \"/\" } };\r\n    return (\r\n        <React.Fragment>\r\n            <Header></Header>\r\n            <LoginForm login={(id, password) => {\r\n                props.login(id, password, history, from)\r\n            }}></LoginForm>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        login: (id, password, history, from) => dispatch(login(id, password, history, from))\r\n    }\r\n}\r\n\r\nconst LoginScreen = connect(mapStateToProps, mapDispatchToProps)(Login)\r\nexport { LoginScreen }","import React, { useState } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nfunction SignupForm(props) {\r\n    const [id, setId] = useState(\"\")\r\n    const [password, setPassword] = useState(\"\")\r\n    const [maxTodo, setMaxTodo] = useState(5)\r\n\r\n    return (\r\n        <div className=\"pa4\">\r\n            <div className=\"cf pa2\">\r\n                <div className=\"fl w-30-ns w-100 pa2 cf\">\r\n                    <label className=\"db fr f3\" htmlFor=\"id\">ID</label>\r\n                </div>\r\n                <div className=\"fl w-70-ns w-100 pa2\">\r\n                    <input type=\"text\" className=\"w-60\" name=\"id\" value={id} onChange={e => {\r\n                        setId(e.target.value)\r\n                    }}></input>\r\n                </div>\r\n            </div>\r\n            <div className=\"cf pa2\">\r\n                <div className=\"fl w-30-ns w-100 pa2 cf\">\r\n                    <label className=\"db fr f3\" htmlFor=\"password\">Password</label>\r\n                </div>\r\n                <div className=\"fl w-70-ns w-100 pa2\">\r\n                    <input type=\"password\" className=\"w-60\" name=\"password\" value={password} onChange={e => {\r\n                        setPassword(e.target.value)\r\n                    }}></input>\r\n                </div>\r\n            </div>\r\n            <div className=\"cf pa2\">\r\n                <div className=\"fl w-30-ns w-100 pa2 cf\">\r\n                    <label className=\"db fr f3\" htmlFor=\"id\">ID</label>\r\n                </div>\r\n                <div className=\"fl w-70-ns w-100 pa2\">\r\n                    <input type=\"number\" className=\"w-60\" name=\"id\" value={maxTodo} onChange={e => {\r\n                        setMaxTodo(e.target.value)\r\n                    }}></input>\r\n                </div>\r\n            </div>\r\n            <div className=\"cf pa2 mt4\">\r\n                <div className=\"fl w-30-ns w-100 pa2\">&nbsp;</div>\r\n                <div className=\"fl w-70-ns w-100 pa2\">\r\n                    <a className=\"link w-60 v-mid tc bg-gray white db pa2 f3 mb2\" href=\"#\" onClick={() => {\r\n                        props.signup(id, password, +maxTodo)\r\n                    }}>Signup</a>\r\n                    <Link className=\"link w-60 v-mid tc bg-white black ba bw-1 db pa2 f3\" to=\"/login\">Back to Login</Link>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport { SignupForm }","import React from 'react'\r\nimport { Header } from \"../components/common/header\"\r\nimport { SignupForm } from \"../components/signup/signupForm\"\r\nimport { signup } from '../stores/auth/auth.action'\r\nimport { connect } from 'react-redux'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\n\r\nfunction Signup(props) {\r\n    let history = useHistory();\r\n    let location = useLocation();\r\n    let { from } = location.state || { from: { pathname: \"/\" } };\r\n    return (\r\n        <React.Fragment>\r\n            <Header></Header>\r\n            <SignupForm signup={(id, password, maxTodo) => {\r\n                props.signup(id, password, maxTodo, history, from)\r\n            }}></SignupForm>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        signup: (id, password, maxTodo, history, from) => dispatch(signup(id, password, maxTodo, history, from))\r\n    }\r\n}\r\n\r\nconst SignupScreen = connect(mapStateToProps, mapDispatchToProps)(Signup)\r\nexport { SignupScreen }","import React from 'react'\r\nimport { Route, Redirect } from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\n\r\nfunction privateRoute(props) {\r\n    let {children, ...rest} = props\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            render={({ location }) =>\r\n                props.user.authenticated ? (\r\n                    children\r\n                ) : (\r\n                        <Redirect\r\n                            to={{\r\n                                pathname: \"/login\",\r\n                                state: { from: location }\r\n                            }}\r\n                        />\r\n                    )\r\n            }\r\n        />\r\n    );\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        user: state.auth.user,\r\n    }\r\n}\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n\r\n    }\r\n}\r\n\r\nconst PrivateRoute = connect(mapStateToProps, mapDispatchToProps)(privateRoute)\r\n\r\nexport { PrivateRoute }","import React from 'react'\nimport \"tachyons\"\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch\n} from 'react-router-dom'\nimport { IndexScreen } from \"./screens/index\"\nimport { LoginScreen } from \"./screens/login\"\nimport { SignupScreen } from \"./screens/signup\"\nimport { PrivateRoute } from './components/common/privateRoute'\n\nfunction App() {\n  return (\n      <Router>\n        <Switch>\n          <Route path=\"/signup\" component={SignupScreen}></Route>\n          <Route path=\"/login\" component={LoginScreen}></Route>\n          <PrivateRoute path=\"/tasks\" component={IndexScreen}></PrivateRoute>\n          <PrivateRoute path=\"/\" component={IndexScreen}></PrivateRoute>\n        </Switch>\n      </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { actions } from \"./index.type\"\r\n\r\nconst initialState = {\r\n    tasks: {\r\n        data: [],\r\n        error: null,\r\n    },\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actions.SET_TASKS: {\r\n            return {\r\n                ...state,\r\n                tasks: {\r\n                    ...state.tasks,\r\n                    data: action.data || [],\r\n                    error: action.error,\r\n                }\r\n            }\r\n        }\r\n        case actions.ADD_TASK: {\r\n            let data = state.tasks.data || []\r\n            return {\r\n                ...state,\r\n                tasks: {\r\n                    ...state.tasks,\r\n                    data: [...data, action.data],\r\n                    error: action.error,\r\n                }\r\n            }\r\n        }\r\n        case actions.UPDATE_TASK: {\r\n            let data = state.tasks.data || []\r\n            return {\r\n                ...state,\r\n                tasks: {\r\n                    ...state.tasks,\r\n                    data: data.map(task => task.id === action.data.id ? action.data : task),\r\n                    error: action.error,\r\n                }\r\n            }\r\n        }\r\n        case actions.DELETE_TASK: {\r\n            let data = state.tasks.data || []\r\n            return {\r\n                ...state,\r\n                tasks: {\r\n                    ...state.tasks,\r\n                    data: data.filter(task => task.id !== action.data),\r\n                    error: action.error,\r\n                }\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default reducer","import { actions } from \"./auth.type\"\r\n\r\nconst initialState = {\r\n    user: {\r\n        id: \"\",\r\n        authenticated: true,\r\n    }\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actions.AUTHENTICATE:\r\n            return {\r\n                ...state,\r\n                user: {\r\n                    ...state.user,\r\n                    authenticated: action.authenticated,\r\n                }\r\n            }\r\n        case actions.SET_USER_INFO:\r\n            return {\r\n                ...state,\r\n                user: {\r\n                    ...state.user,\r\n                    id: action.id,\r\n                }\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default reducer","import { createStore, combineReducers, applyMiddleware } from \"redux\"\r\nimport thunk from \"redux-thunk\"\r\nimport indexReducer from \"./index/index.reducer\"\r\nimport authReducer from \"./auth/auth.reducer\"\r\n\r\nconst rootReducer = combineReducers({\r\n    index: indexReducer,\r\n    auth: authReducer,\r\n})\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {store} from \"./stores/configureStore\"\nimport {Provider} from \"react-redux\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}